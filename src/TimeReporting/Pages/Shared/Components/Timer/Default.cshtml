@model TimeReporting.Pages.Shared.Components.Timer.TimerViewComponent

@switch (Model.Status)
{
  case TimerStatus.NotStarted:
    <div id="timer">
      <div class="text-center">
        <div class="mb-3">
          <i class="bi bi-stopwatch display-5 text-muted"></i>
        </div>
        <a class="btn btn-success d-flex justify-content-center align-items-center w-100 rounded-pill"
           up-target="#timer"
           asp-page="/Index"
           asp-page-handler="StartTimer">
          <i class="bi bi-play-circle m-0 p-0 text-light"></i>
          <span class="timer-text ms-2">
            Start Timer
          </span>
        </a>
      </div>
    </div>
    break;

  case TimerStatus.Running:
    <div id="timer" up-poll up-interval="60000">
      <div class="card border-0 bg-body-tertiary">
        <div class="card-body">
          <div class="d-flex flex-column gap-2 align-items-center justify-content-between">
            <div class="clock-wrapper">
              <div class="clock"></div>
            </div>
            <p class="mb-0 text-muted fs-5">
              @if (Model.Duration.Hours > 0)
              {
                <span class="d-flex">
                  <strong>@Model.Duration.Hours</strong>
                  <span class="timer-text ps-2">@(Model.Duration.Hours == 1 ? "hour" : "hours")</span>
                  <span class="timer-text-collapsed">h</span>
                </span>
              }
              <span class="d-flex">
                <strong>@Model.Duration.Minutes</strong>
                <span class="timer-text ps-2">@(Model.Duration.Minutes == 1 ? "minute" : "minutes")</span>
                <span class="timer-text-collapsed">m</span>
              </span>
            </p>
          </div>
        </div>
      </div>
      <div>
        <a asp-page="/Index"
           asp-page-handler="StopTimer"
           up-target="#timer"
           class="btn btn-danger w-100 rounded-pill">
          <i class="bi bi-stop-circle text-light"></i>
        </a>
      </div>
    </div>
    break;

  case TimerStatus.Stopped:
    <div id="timer">
      <div class="card border-0 bg-body-tertiary">
        <div class="card-body">
          <div class="d-flex flex-column gap-2 align-items-center justify-content-between">
            <p class="mb-0 text-muted fs-5">
              @if (Model.Duration.Hours > 0)
              {
                <span class="d-flex">
                <strong>@Model.Duration.Hours</strong>
                <span class="timer-text ps-2">@(Model.Duration.Hours == 1 ? "hour" : "hours")</span>
                <span class="timer-text-collapsed">h</span>
              </span>
              }
              <span class="d-flex">
              <strong>@Model.Duration.Minutes</strong>
              <span class="timer-text ps-2">@(Model.Duration.Minutes == 1 ? "minute" : "minutes")</span>
              <span class="timer-text-collapsed">m</span>
            </span>
            </p>
          </div>
        </div>
        <div class="d-flex flex-column gap-2">
          <a asp-page="/Reports/Create"
             asp-route-hours="@Model.Duration.Hours"
             asp-route-minutes="@Model.Duration.Minutes"
             asp-route-fromTimer="true"
             class="btn btn-success rounded-pill"
             up-layer="new modal"
             up-on-accepted="up.reload('#content')"
             up-accept-location="/Reports"
             up-history="false">
            <i class="bi bi-plus-circle text-light"></i>
          </a>
          <a asp-page="/Index"
             asp-page-handler="DiscardTimer"
             up-target="#timer"
             up-confirm="Are you sure you want to discard this timer?"
             class="btn btn-danger rounded-pill">
            <i class="bi bi-trash text-light"></i>
          </a>
        </div>
      </div>
    </div>
    break;
}